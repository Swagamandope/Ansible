- name: Setup stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
   - name: import vpc set up
     include_vars: output_vars.txt
   
   - name: import vpc set up
     include_vars: vprostacksetup.txt

   - name: Create vprofile ec2 key
     ec2_key:
         name: vprokey
         region: "{{region}}"
     register: vprokey_out

   - name: Save key
     copy:
        content: "{{vprokey_out.key.private_key}}"
        dest: "./web-key.pem"
        mode: 0600
     when: vprokey_out.changed

   - name: create SG for load balancer
     ec2_group:
        name: vproLB
        description: allow port 80 from anywhere
        vpc_id: "{{vpcid}}"
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
     register: vproLB_out
    
   - name: create SG for backend services
     ec2_group:
        name: backend
        description: allow port 22 from anywhere
        vpc_id: "{{vpcid}}"
        region: "{{region}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vproLB_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
     register: vprostacksg_out

   - name: update SG with on SG
     ec2_group:
        name: vprostack-sg
        description: allow 22
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
         - proto: all
           group_id: "{{vprostacksg_out.group_id}}"
 
   - name: creating nginx web01
     ec2:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginix_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
            Name: "web01"
            Project: db
            Owner: devops
        exact_count: 1
        count_tag:
            Name: "web01"
            Project: db
            Owner:  devops
        group_id: "{{vprostacksg_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
     register: web01_out

   - name: creating tomcat app01
     ec2:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
            Name: "app01"
            Project: db
            Owner: devops
        exact_count: 1
        count_tag:
            Name: "app01"
            Project: db
            Owner:  devops
        group_id: "{{vprostacksg_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
     register: app01_out

   - name: creating memc mem01
     ec2:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mem_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
            Name: "mem01"
            Project: db
            Owner: devops
        exact_count: 1
        count_tag:
            Name: "mem01"
            Project: db
            Owner:  devops
        group_id: "{{vprostacksg_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
     register: mem01_out

   - name: creating rmq rmq01
     ec2:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
            Name: "rmq01"
            Project: db
            Owner: devops
        exact_count: 1
        count_tag:
            Name: "rmq01"
            Project: db
            Owner:  devops
        group_id: "{{vprostacksg_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
     register: rmq01_out


   - name: creating db db01
     ec2:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
            Name: "mysql01"
            Project: db
            Owner: devops
        exact_count: 1
        count_tag:
            Name: "myql01"
            Project: db
            Owner:  devops
        group_id: "{{vprostacksg_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
     register: mysql01_out

   - debug:
        var: db01_out.tagged_instances[0].id
        
   - local_action:
      module: ec2_elb_lb
      name: "vprofile-elb"
      region: "{{region}}"
      state: present
      instance_ids:
        - "{{web01_out.tagged_instances[0].id}}"
      purge_instance_ids: true
      security_group_ids: "{{vproLB_out.group_id}}"
      subnets:
        - "{{pubsub1id}}"
        - "{{pubsub2id}}"
        - "{{pubsub3id}}"
      listeners:
        - protocol: http # options are http, https, ssl, tcp
          load_balancer_port: 80
          instance_port: 80
   
   - name: insert/update host ip and name in provision stack
     blockinfile:
       path: provision/group_vars/hostsip
       block: 
         web01_ip: "{{web01_out.tagged_instances[0].private_ip}}"
         app01_ip: "{{app01_out.tagged_instances[0].private_ip}}"
         rmq01_ip: "{{rmq01_out.tagged_instances[0].private_ip}}"
         mem01_ip: "{{mem01_out.tagged_instances[0].private_ip}}"
         db01_ip: "{{mysql01_out.tagged_instances[0].private_ip}}"

   - name: copy logi key to provision diretor
     copy:
       src: web-key.pem
       dest: provision/web-key.pem
       mode: '0400'
   
   - name: insert/update inv file provision stack
     blockinfile:
        path: provision/inv
        block:
           web01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
           app01 ansible_host={{ app01_out.tagged_instances[0].private_ip }}
           rmq01 ansible_host={{ rmq01_out.tagged_instances[0].private_ip }}
           mc01 ansible_host={{ mem01_out.tagged_instances[0].private_ip }}
           db01 ansible_host={{ mysql01_out.tagged_instances[0].private_ip }}
           cntl ansible_host= 18.205.238.162 ansible_connection=local

           [websrvgrp]
           web01

           [appsrvgrp]
           app01

           [rmqsrvgrp]
           rmq01

           [memsrvgrp]
           mem01

           [dbsrvgrp]
           mysql01

           [control]
           cntl

           [stack_inst:children]
           websrvgrp
           appsrvgrp
           rmqsrvgrp
           memsrvgrp
           dbsrvgrp
           
           [stack_inst:vars]
           ansible_user=ubuntu
           ansible_ssh_private_key_file=web-key.pem
           #ansible_python_interpreter=/usr/bin/python3
